#BlueJ class context
comment0.target=AdjListsGraph
comment1.params=
comment1.target=AdjListsGraph()
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ AdjListsGraph\n
comment10.params=v
comment10.target=boolean\ isVertex(java.lang.Object)
comment10.text=\n\ Returns\ true\ if\ vertex\ exists\ within\ vertices\ vector\ already\n
comment11.params=vertex1\ vertex2
comment11.target=void\ addArc(java.lang.Object,\ java.lang.Object)
comment11.text=\ \n\ Inserts\ an\ arc\ between\ two\ given\ vertices\ of\ this\ graph.\n\ if\ at\ least\ one\ of\ the\ vertices\ does\ not\ exist,\ the\ graph\ \n\ is\ not\ changed.\n\ \n\ @param\ the\ origin\ of\ the\ arc\ to\ be\ added\ to\ this\ graph\n\ @param\ the\ destination\ of\ the\ arc\ to\ be\ added\ to\ this\ graph\n\ \n
comment12.params=v
comment12.target=java.util.LinkedList\ BFS(java.lang.Object)
comment12.text=\n\ returns\ nodes\ in\ breadth\ first\ search\ order\n
comment13.params=v
comment13.target=java.util.LinkedList\ DFS(java.lang.Object)
comment13.text=\n\ returns\ nodes\ in\ depth\ first\ search\ order\n
comment14.params=vertex
comment14.target=java.util.LinkedList\ getSuccessors(java.lang.Object)
comment14.text=\ \n\ Return\ all\ the\ vertices,\ in\ this\ graph,\ adjacent\ to\ the\ given\ vertex.\n\ \n\ @param\ A\ vertex\ in\ th\ egraph\ whose\ successors\ will\ be\ returned.\n\ @return\ LinkedList\ containing\ all\ the\ vertices\ x\ in\ the\ graph,\n\ for\ which\ an\ arc\ exists\ from\ the\ given\ vertex\ to\ x\ (vertex\ ->\ x).\n\n
comment15.params=vertex
comment15.target=java.util.LinkedList\ getPredecessors(java.lang.Object)
comment15.text=\ \n\ Return\ all\ the\ vertices\ x,\ in\ this\ graph,\ that\ precede\ a\ given\n\ vertex.\n\ \n\ @param\ A\ vertex\ in\ the\ graph\ whose\ predecessors\ will\ be\ returned.\n\ @return\ LinkedList\ containing\ all\ the\ vertices\ x\ in\ the\ graph,\n\ for\ which\ an\ arc\ exists\ from\ x\ to\ the\ given\ vertex\ (x\ ->\ vertex).\n\ \n
comment16.params=vertex1\ vertex2
comment16.target=void\ removeEdge(java.lang.Object,\ java.lang.Object)
comment16.text=\n\ Removes\ given\ edge\ from\ this\ graph\n\ \n
comment17.params=vertex1\ vertex2
comment17.target=void\ removeArc(java.lang.Object,\ java.lang.Object)
comment17.text=\n\ Removes\ given\ arc\ from\ this\ graph\n\ \n
comment18.params=vertex
comment18.target=void\ removeVertex(java.lang.Object)
comment18.text=\n\ Removes\ given\ vertex\ from\ this\ graph\n\ \n
comment19.params=tgf_file_name
comment19.target=void\ saveToTGF(java.lang.String)
comment19.text=\ \n\ Writes\ this\ graph\ into\ a\ file\ in\ the\ TGF\ format.\n\ \n\ @param\ the\ name\ of\ the\ file\ where\ this\ graph\ will\ be\ written\ \n\ in\ the\ TGF\ format.\n
comment2.params=
comment2.target=java.lang.String\ toString()
comment2.text=\n\ Returns\ a\ string\ representation\ of\ this\ graph\n
comment20.params=
comment20.target=boolean\ isUndirected()
comment20.text=\ \n\ Returns\ true\ if\ the\ graph\ is\ undirected,\ that\ is,\ for\ every\n\ pair\ of\ nodes\ i,j\ for\ which\ there\ is\ an\ arc,\ the\ opposite\ arc\n\ is\ also\ present\ in\ the\ graph,\ false\ otherwise.\ \ \n\ \n\ @return\ true\ if\ the\ graph\ is\ undirected,\ false\ otherwise\n
comment21.params=args
comment21.target=void\ main(java.lang.String[])
comment3.params=
comment3.target=boolean\ isEmpty()
comment3.text=\ \n\ Returns\ a\ boolean\ indicating\ whether\ this\ graph\ is\ empty\ or\ not.\n\ A\ graph\ is\ empty\ when\ it\ contains\ no\ vertice,a\ nd\ of\ course,\ no\ edges.\n\ \ \n\ \ @return\ true\ if\ this\ graph\ is\ empty,\ false\ otherwise.\n
comment4.params=
comment4.target=int\ getNumVertices()
comment4.text=\ \n\ Returns\ the\ number\ of\ vertices\ in\ this\ graph.\ \n\ \n\ @return\ the\ number\ of\ vertices\ in\ this\ graph\n
comment5.params=
comment5.target=int\ getNumArcs()
comment5.text=\ \n\ Returns\ the\ number\ of\ arcs\ in\ this\ graph.\n\ An\ arc\ between\ Verteces\ A\ and\ B\ exists,\ if\ a\ direct\ connection\n\ from\ A\ to\ B\ exists.\n\ \n\ @return\ the\ number\ of\ arcs\ in\ this\ graph\n
comment6.params=vertex1\ vertex2
comment6.target=void\ addEdge(java.lang.Object,\ java.lang.Object)
comment6.text=\ \n\ Inserts\ the\ edge\ between\ the\ two\ given\ vertices\ of\ this\ graph,\ if\ both\ vertices\ exist,\ \n\ else\ the\ graph\ is\ not\ changed\n\ \n\ @param\ The\ edge\ to\ be\ added\ to\ this\ graph\n
comment7.params=vertex
comment7.target=void\ addVertex(java.lang.Object)
comment7.text=\ \n\ Adds\ the\ given\ vertex\ to\ this\ graph\n\ If\ the\ given\ vertex\ already\ exists,\ the\ graph\ does\ not\ change\n\ \n\ @param\ The\ vertex\ to\ be\ added\ to\ this\ graph\n
comment8.params=vertex1\ vertex2
comment8.target=boolean\ isEdge(java.lang.Object,\ java.lang.Object)
comment8.text=\ \n\ Returns\ true\ if\ an\ edge\ exists\ \n\ from\ the\ first\ vertex\ to\ the\ second,\ false\ otherwise\n\ \n\ @return\ true\ if\ an\ edge\ exists\ between\ the\ first\ given\ vertex\ (vertex1),\n\ and\ the\ second\ one\ (vertex2),false\ otherwise\n\ \n
comment9.params=vertex1\ vertex2
comment9.target=boolean\ isArc(java.lang.Object,\ java.lang.Object)
comment9.text=\ \n\ Returns\ true\ if\ an\ arc\ (direct\ connection)\ exists\ \n\ from\ the\ first\ vertex\ to\ the\ second,\ false\ otherwise\n\ \n\ @return\ true\ if\ an\ arc\ exists\ between\ the\ first\ given\ vertex\ (vertex1),\n\ and\ the\ second\ one\ (vertex2),false\ otherwise\n\ \n
numComments=22
